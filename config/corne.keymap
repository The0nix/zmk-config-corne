/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&kp CAPSLOCK>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC           &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y        &kp U  &kp I      &kp O    &kp P     &kp BSPC
&kp TAB           &kp A  &kp S  &kp D     &kp F  &kp G        &kp H        &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N        &kp M  &kp COMMA  &kp DOT  &kp FSLH  &kp ENTER
                                &kp LGUI  &mo 1  &kp SPACE    &shift_caps  &mo 2  &kp LALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1          &kp N2                    &kp N3        &kp N4        &kp N5              &kp N6  &kp N7    &kp N8    &kp N9  &kp N0     &trans
&trans  &kp C_BRI_DN    &kp C_BRI_UP              &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE          &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
&trans  &kp LS(LG(N4))  &kp LS(LC(LG(NUMBER_4)))  &kp C_PREV    &kp C_NEXT    &kp C_PLAY_PAUSE    &trans  &trans    &trans    &trans  &trans     &trans
                                                  &trans        &trans        &trans              &trans  &trans    &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE  &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT       &kp CARET  &kp AMPS  &kp KP_MULTIPLY  &kp LPAR  &kp RPAR   &kp BACKSLASH
&kp GRAVE  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp PLUS   &kp LEFT  &kp DOWN         &kp UP    &kp RIGHT  &kp EQUAL
&trans     &trans        &trans        &trans        &trans        &bt BT_CLR      &kp MINUS  &kp LBRC  &kp RBRC         &kp LBKT  &kp RBKT   &kp UNDER
                                       &trans        &trans        &trans          &trans     &trans    &trans
            >;
        };

        cond_layer {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &kp F12
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        cond {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
